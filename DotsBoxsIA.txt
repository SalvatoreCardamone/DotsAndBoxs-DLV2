%ENTITA
%linea(START_X,START_Y,END_X,END_Y, TIME) TIME = old, oppure new. Legge da input le vecchie linee, ed inserisce una nuova
%punto(COORD_X,COORD_Y).

punto(0,0).
punto(0,1).
punto(0,2).
%punto(0,3).
%punto(0,4).

%punto(1,0).
%punto(1,1).
%punto(1,2).
%punto(1,3).
%punto(1,4).

%punto(2,0).
%punto(2,1).
%punto(2,2).
%punto(2,3).
%punto(2,4).

%punto(3,0).
%punto(3,1).
%punto(3,2).
%punto(3,3).
%punto(3,4).

%punto(4,0).
%punto(4,1).
%punto(4,2).
%punto(4,3).
%punto(4,4).

linea(0,0,0,1,old).

%GUESS
%DATI 2 PUNTI, DECIDO SE INSERIRE OPPURE NO UNA LINEA TRA LORO
linea(START_X,START_Y,END_X,END_Y, new) | nonlinea(START_X,START_Y,END_X,END_Y, new) :- punto(START_X,START_Y), punto(END_X,END_Y).

%SE INSERISCO UNA LINEA, AVRA ENTRAMBE  LE COORDINATE COME PARTENZA E ARRIVO
linea(START_X,START_Y,END_X,END_Y, TIME) :- linea(END_X,END_Y,START_X,START_Y, TIME).

%AD OGNI TURNO DEVO INSERIRE 1 LINEA
:- #count { new : linea(_,_,_,_,new) } < 1.

%NON POSSO INSERIRE UNA LINEA DOVE CE N'ERA UNA VECCHIA
:- linea(START_X,START_Y,END_X,END_Y, new), linea(END_X,END_Y,START_X,START_Y, old).

%CHECK 
%UNA LINEA NON PUO ESSERE TRA 2 PUNTI UGUALI
:- linea(START_X,START_Y,END_X,END_Y, new), START_X = END_X, START_Y = END_Y.


%UNA LINEA NON PUO ESSERE TRA 2 PUNTI NON VICINI ORIZONTALMENTE/VERTICALMENTE
:- linea(START_X,START_Y,END_X,END_Y, new), START_X > END_X, START_X - END_X > 1.
:- linea(START_X,START_Y,END_X,END_Y, new), START_Y > END_Y, START_Y - END_Y > 1.

:- linea(START_X,START_Y,END_X,END_Y, new), START_X < END_X, START_X - END_X < -1.
:- linea(START_X,START_Y,END_X,END_Y, new), START_Y < END_Y, START_Y - END_Y < -1.


%WEAK CONSTRAINT
%E PREFERIBILE CHIUDERE UN QUADRATO CON UNA LINEA, SE POSSIBILE 
%:~ 

%E PREFERIBILE NON CREARE UN QUADRATO CON UN LATO APERTO CON LA PROSSIMA LINEA 
%:~
